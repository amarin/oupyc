# -*- coding: utf-8 -*-
from oupyc.application.router import RouterThread
from oupyc.inthreads.singleton import ThreadSafeSingletonMixin
from oupyc.utils import underscore_to_camelcase

__author__ = 'AMarin'


class ConditionGenerator(ThreadSafeSingletonMixin):
    """ Takes items from incoming queue, process with transform_item and pass to result queue """
    def __init__(self):
        super(ConditionGenerator, self).__init__()
        self.__routes = {}

    def add_route(self, source, func, destination):
        if source not in self.__routes:
            self.__routes[source]=[]
        self.__routes[source].append(func, destination)

    def get_router_from(self, source):
        source_routes = self.__routes[source]

        def select_destination(item):
            for condition in source_routes:
                if condition[0][item]:
                    return condition[1]

        return type(
            "Conditional%s" % underscore_to_camelcase(source),
            (RouterThread,),
            dict(
                description="Autogenerated conditional router",
                route_item=lambda self, item: select_destination(item),
            ))()

